version: '3.8'

services:
  diarize:
    command: tail -f /dev/null
    #command: ['python','/app/diarize.py']
    # environment:
    #   POSTGRES_DB: db
    #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #   POSTGRES_USER: ${POSTGRES_USER}
    # build:
    #   context: docker
    #   dockerfile: DiarizeDockerfile
    image: diarize:0.1
    #image: transcribe:0.0
    restart: unless-stopped
    runtime: nvidia
    volumes:
    - .:/app
    - ${DATA_PATH}/audio:/audio
    - /var/run/docker.sock:/var/run/docker.sock
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #       - driver: nvidia
    #         capabilities: [gpu]

    # extra_hosts:
    #    - "host.docker.internal:host-gateway" #to connect to host ports

    depends_on:
      - qdrant

  transcribe:
    command: ['python3','/app/transcribe.py']
    #command: tail -f /dev/null

    # build:
      # context: docker
      # dockerfile: TranscribeDockerfile
    image: transcribe:0.0
    restart: unless-stopped
    runtime: nvidia
    volumes:
    - .:/app
    - ${DATA_PATH}/audio:/audio
    - /var/run/docker.sock:/var/run/docker.sock
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #       - driver: nvidia
    #         capabilities: [gpu]

    # extra_hosts:
    #    - "host.docker.internal:host-gateway" #to connect to host ports


  audio:
    command: tail -f /dev/null

   # build: .
    image: audio:0.1
    restart: unless-stopped
    runtime: nvidia
    volumes:
    - .:/app
    - ${DATA_PATH}/audio:/audio
    - /var/run/docker.sock:/var/run/docker.sock

    extra_hosts:
       - "host.docker.internal:host-gateway" #to connect to host port - stream queue. Will be remote host




  # db:
  #   environment:
  #     POSTGRES_DB: db
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #   image: myuser/pgvector
  #   restart: unless-stopped
  #   volumes:
  #     - ${DATA_PATH}/docker_diarizepsql:/var/lib/postgresql/data
  #   ports: 
  #     - 5432:5432

  
  qdrant:
    image: qdrant/qdrant
    volumes:
      - ${DATA_PATH}/qdrant:/qdrant/data
    environment:
      QDRANT__STORAGE__PERSISTENT_STORAGE_PATH: /qdrant/data
    restart: unless-stopped


  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6381:6379" #needs to be exposed outside for remote connection of the main server
    volumes:
    - ${DATA_PATH}/docker_redis_audio:/data