name: dev_audio

services:
  redis:
    image: redis:latest
    restart: unless-stopped
    networks:
      - audio_network
    volumes:
      - ${VOLUME_DATA_PATH}/docker_redis_audio:/data

  api:
    restart: unless-stopped
    build: 
      context: docker
      dockerfile: MainDockerfile
    networks:
      - audio_network
    ports:
      - "${SERVICE_API_PORT}:${SERVICE_API_PORT}"
    depends_on:
      - redis
    environment:
      SERVICE_VERSION: ${SERVICE_VERSION}
      SERVICE_NAME: ${SERVICE_NAME}
      SERVICE_API_HOST: ${SERVICE_API_HOST}
      SERVICE_API_PORT: ${SERVICE_API_PORT}
      SERVICE_TOKEN: ${SERVICE_TOKEN}
      WHISPER_SERVICE_URL: ${WHISPER_SERVICE_URL}

      DEBUG: ${DEBUG}
      CHECK_AND_PROCESS_CONNECTIONS_INTERVAL_SEC: ${CHECK_AND_PROCESS_CONNECTIONS_INTERVAL_SEC}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      STREAM_QUEUE_SERVICE_LIST_CONNECTIONS: ${STREAM_QUEUE_SERVICE_LIST_CONNECTIONS}
      STREAM_QUEUE_SERVICE_GET_NEXT_CHUNKS: ${STREAM_QUEUE_SERVICE_GET_NEXT_CHUNKS}
      STREAM_QUEUE_SERVICE_HEALTH: ${STREAM_QUEUE_SERVICE_HEALTH}
      STREAM_QUEUE_SERVICE_HEALTH_CHECK: ${STREAM_QUEUE_SERVICE_HEALTH_CHECK}
      STREAM_QUEUE_SERVICE_REQUEST_TIMEOUT: ${STREAM_QUEUE_SERVICE_REQUEST_TIMEOUT}
      STREAM_QUEUE_SERVICE_AUTH_TOKEN: ${STREAM_QUEUE_SERVICE_AUTH_TOKEN}

    command: tail -f /dev/null
    volumes:
      - .:/usr/src/app
      - ../library:/usr/src/library
      - ${VOLUME_DATA_PATH}/audio:/audio

networks:
  audio_network:
    name: audio_network
