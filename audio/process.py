# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_audio_processor_from_file.ipynb.

# %% auto 0
__all__ = ['diarize', 'transcribe', 'get_next_chunk_start']

# %% ../nbs/03_audio_processor_from_file.ipynb 1
from .redis import *
from .audio import *

from pathlib import Path
import json

import uuid

import pandas as pd

import redis.asyncio as aioredis
from dataclasses import dataclass
import numpy as np
import asyncio

# %% ../nbs/03_audio_processor_from_file.ipynb 5
async def diarize(audio_data, client_id, audio_name, shift):
    redis_inner_client = await get_inner_redis()
    audio = Audio(chunk_name=audio_name, redis_client=redis_inner_client, data=audio_data)
    await audio.save()
    await redis_inner_client.lpush('Audio2DiarizeQueue', f'{audio_name}:{client_id}')
    done = await redis_inner_client.brpop(f'DiarizeReady:{audio_name}')
    diarization = Diarisation(audio_name, redis_inner_client)
    await diarization.get()
    df = pd.DataFrame(diarization.data)
    if len(df)>0:
        df['silence'] = df['start']-df['end'].shift()
        df['speaker_change'] = df['speaker'] != df['speaker'].shift()
        df['len'] = df['end'] - df['start']
        df = df[df['len'] > 0.5]
        df['speaker_change'] = np.where(df['silence']>2,True,df['speaker_change'])

        df['speaker_change'] = df['speaker_change'].cumsum()
        df = df.groupby('speaker_change').agg({'speaker': 'first', 'start': 'first', 'end': 'last'})
        df['conv_start'] = df['start'] + shift
        df['conv_end'] = df['end'] + shift
        return df.to_dict('records')
    else: return df

# %% ../nbs/03_audio_processor_from_file.ipynb 6
import time
async def transcribe(diarization_result,connection_id,audio_name):
    redis_inner_client = await get_inner_redis()
    for segment in diarization_result:
        segment['connection_id'] = connection_id
        segment['name'] = str(uuid.uuid4())
        segment['audio_id'] = audio_name
        print('lpush')
        await redis_inner_client.lpush('TranscribeQueue', json.dumps(segment))
        print('brpop')
        done = await redis_inner_client.brpop(f'TranscribeReady:{segment["name"]}')
        print('done')
        transcription = Transcript(segment["name"],redis_inner_client)
        await transcription.get()
        segment['transcription'] = transcription.data
        await redis_inner_client.lpush(f'Segment:{connection_id}', json.dumps(segment))

# %% ../nbs/03_audio_processor_from_file.ipynb 7
async def get_next_chunk_start(diarization_result, length):
    if len(diarization_result)>0:
        last_speech = diarization_result[-1]
        if round(last_speech['end']) == length:
            return last_speech['conv_start']
        

        else: return last_speech['conv_end']



    else: return None

# %% ../nbs/03_audio_processor_from_file.ipynb 10
async def get_next_chunk_start(diarization_result, length):
    if len(diarization_result)>0:
        last_speech = diarization_result[-1]
        if last_speech['end']+0.1 > length:
            return last_speech['conv_start']
        
        else: 
            return last_speech['conv_end']



    else: return None
