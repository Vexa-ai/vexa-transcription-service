# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00.psql.ipynb.

# %% auto 0
__all__ = ['POSTGRES_USER', 'POSTGRES_PASSWORD', 'DATABASE_URL', 'engine', 'Session', 'session', 'Base', 'schema', 'LocalBase',
           'query2df', 'engine_execute', 'SpeakerEmbs', 'Speakers']

# %% ../nbs/00.psql.ipynb 2
from dotenv import load_dotenv
import os


from sqlalchemy import create_engine, MetaData, inspect, Column, ForeignKey, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker,mapped_column
from sqlalchemy.sql import text
from sqlalchemy.dialects.postgresql import UUID
from pgvector.sqlalchemy import Vector
from sqlalchemy import Column, Integer, String ,DateTime,UniqueConstraint,Table, BIGINT

import uuid

# %% ../nbs/00.psql.ipynb 3
def query2df(query):
    query_str = query.statement.compile(dialect=query.session.bind.dialect)
    return pd.read_sql(query_str, query.session.bind)

# %% ../nbs/00.psql.ipynb 4
load_dotenv('/app/.env')
POSTGRES_USER = os.getenv('POSTGRES_USER')
POSTGRES_PASSWORD = os.getenv('POSTGRES_PASSWORD')



DATABASE_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@db:5432/db"
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()
Base = declarative_base()

# %% ../nbs/00.psql.ipynb 6
schema = 'speakers'
LocalBase = declarative_base(metadata=MetaData(schema=schema))



def engine_execute(statement):
    with engine.begin() as connection:
        connection.execute(text(statement))

# %% ../nbs/00.psql.ipynb 8
class SpeakerEmbs(LocalBase):
    __tablename__ = 'speakerembs'
    id = mapped_column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    embedding = mapped_column(Vector(256))
    speaker_id = mapped_column(UUID(as_uuid=True), ForeignKey('speakers.id'), nullable=False)
    client_id = Column(UUID(as_uuid=True), ForeignKey('clients.id'), nullable=False)



class Speakers(LocalBase):
    __tablename__ = 'speakers'
    id = mapped_column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    client_id = Column(UUID(as_uuid=True), ForeignKey('clients.id'), nullable=False)
